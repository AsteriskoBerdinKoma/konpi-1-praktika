package praktika1;

///////////////////////////////////////////////////
// Praktika Raul Barrenak partzialki euskaratuta //
///////////////////////////////////////////////////

public class Afd {
	final private int ezBukaerakoKopurua = 7; // zenbat egoera ez-bukaerakoak dauden

	final private int taula[][] = {
			/*                                      EGOERAK                                            */
		    /*                              1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2 */
		    /*0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9 */

		    { 1, 1, 1,-1,-1,-1,-1,-1,-1,-1,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 0 --> hizkia

		    {-1, 2,-1,-1,-1,-1,-1,-1,-1,-1,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 1 --> _

		    { 9,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 2 --> (

		    {15,-1,-1,-1,-1,-1,-1,-1,-1,10,11,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 3 --> *

		    //{-1,-1,-1, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 4 --> ^*
		
		    //beste egoeretan definituta 10 egoeraren bidez

		  	//{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 5 --> ^(*)) (ez *))
		    
		    {24,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 6 --> )

		    {22,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 7 --> ,

		    {23,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 8 --> ;

		    {20,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 9 --> :

		    {25,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 10 --> {

		    {26,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 11 --> }

		    {13,-1,-1,-1,-1,-1, 8,-1,-1,-1,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 12 --> +

		    {14,-1,-1,-1,-1,-1, 8,-1,-1,-1,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 13 --> -

		    {16,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 14 --> /

		    {19,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 15 --> <

		    {17,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 16 --> >

		    {18,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,10,-1,-1,-1,-1,-1,28,-1,29,21,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 17 --> =

		    { 3, 1, 1, 3, 5, 5, 7, 7, 7,-1,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 18 --> digitu

		    {-1,-1,-1, 4,-1,-1,-1,-1,-1,-1,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 19 --> .

		    { 1, 1, 1,-1,-1, 6,-1,-1,-1,-1,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 20 --> [E.e]
		    
		    {27,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,27,-1,-1},//simbolo 21 --> zuriune

		    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},//simbolo 22 --> errorea

		                           };

	final private int ezBukaerakoEgoerak[] = { 0, 2, 4, 6, 8, 10, 11 }; // egoera ez-bukaerakoak

	// Automataren transizioa kalkulatzen du
	final public int trantsizioa(int egoera, int sinboloa) {
		return (taula[sinboloa][egoera]);
	} 

	// Egoera bukaerakoa den ala ez itzultzen du
	final public boolean isBukaerako(int egoera) {
		boolean aurkitua = false;

		for (int i = 0; i < this.ezBukaerakoKopurua & !aurkitua; i++) {
			if (egoera == ezBukaerakoEgoerak[i])
				aurkitua = true;
		}
		return (!aurkitua);
	}
}
